# src/gnatsgofetch.py
import logging
from pathlib import Path
import requests
import pandas as pd
import geopandas as gpd
from tenacity import retry, stop_after_attempt, wait_exponential

log = logging.getLogger(__name__)

SDA_URL = "https://sdmdataaccess.sc.egov.usda.gov/api/tabular/query"

class Gnatsgo:
    def __init__(self, output_dir):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        log.info(f"Initialized Gnatsgo fetcher. Output will be saved to {self.output_dir}")

    def _get_aoi_wkt(self, shapefile: gpd.GeoDataFrame) -> str:
        """Converts the GeoDataFrame geometry to WKT for the SDA query."""
        if shapefile.crs.to_epsg() != 4326:
            shapefile = shapefile.to_crs("EPSG:4326")
        aoi_geom = shapefile.geometry.unary_union
        return aoi_geom.wkt

    def _build_sda_query(self, aoi_wkt: str) -> str:
        """Builds the SQL query to get component and horizon data for the AOI."""
        return f'''
            SELECT
                mu.mukey, c.cokey, c.compname, c.comppct_r,
                ch.chkey, ch.hzname, ch.hzdept_r, ch.hzdepb_r,
                ch.sandtotal_r, ch.silttotal_r, ch.claytotal_r,
                ch.om_r,
                ch.cec7_r, ch.ph1to1h2o_r,
                ch.dbovendry_r, ch.fragvol_r
            FROM
                mupolygon AS mupoly
                JOIN mapunit AS mu ON mupoly.mukey = mu.mukey
                JOIN component AS c ON mu.mukey = c.mukey
                JOIN chorizon AS ch ON c.cokey = ch.cokey
            WHERE
                mupoly.mukey IN (
                    SELECT DISTINCT mukey from mupolygon
                    WHERE ST_INTERSECTS(mupolygon.mupolygongeo, ST_GeomFromText(\'{aoi_wkt}\', 4326))
                )
            ORDER BY
                c.comppct_r DESC, c.cokey, ch.hzdept_r ASC
        '''

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=2, min=4, max=30))
    def _execute_sda_query(self, query: str) -> pd.DataFrame:
        """Executes the query against the SDA API and returns a DataFrame."""
        log.info("Sending query to Soil Data Access (SDA) API...")
        params = {{'query': query, 'format': 'JSON+COLUMNNAME'}}

        # Using a session for connection pooling
        with requests.Session() as session:
            response = session.post(SDA_URL, data=params, timeout=300) # Long timeout for large queries

        response.raise_for_status()

        data = response.json().get('Table')
        if not data:
            log.warning("SDA query returned no data for the given AOI.")
            return pd.DataFrame()

        columns = data[0]
        rows = data[1:]
        df = pd.DataFrame(rows, columns=columns)

        # Convert numeric columns, coercing errors to NaN
        for col in df.columns:
            if col not in ['compname', 'hzname']: # Avoid converting text columns
                 df[col] = pd.to_numeric(df[col], errors='coerce')

        log.info(f"Successfully retrieved {len(df)} horizon records from SDA.")
        return df

    def get_data(self, shapefile: gpd.GeoDataFrame, job_name: str, **kwargs):
        """
        Fetches gNATSGO tabular component and horizon data for the given AOI.
        Saves the data to a CSV file.
        """
        log.info(f"Starting gNATSGO tabular data fetch for job: '{job_name}'")

        output_path = self.output_dir / f"{job_name}_tabular_data.csv"
        if output_path.exists():
            log.info(f"✅ Tabular gNATSGO data '{output_path.name}' already exists. Skipping fetch.")
            return

        aoi_wkt = self._get_aoi_wkt(shapefile)
        query = self._build_sda_query(aoi_wkt)

        try:
            results_df = self._execute_sda_query(query)
            if not results_df.empty:
                results_df.to_csv(output_path, index=False)
                log.info(f"✅ gNATSGO tabular data saved to {output_path}")
            else:
                # Create an empty file to indicate the query was tried but returned nothing
                output_path.touch()
                log.info(f"SDA returned no data; empty marker file created at {output_path}")

        except requests.exceptions.RequestException as e:
            log.error(f"Failed to query SDA API after multiple retries: {e}")
        except Exception as e:
            log.error(f"An unexpected error occurred in get_data: {e}", exc_info=True)
